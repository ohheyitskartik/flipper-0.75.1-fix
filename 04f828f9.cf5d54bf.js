(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{142:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),p=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(t),b=r,f=s["".concat(o,".").concat(b)]||s[b]||d[b]||a;return t?i.a.createElement(f,l(l({ref:n},u),{},{components:t})):i.a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},143:function(e,n,t){"use strict";t.r(n);var r=t(0),i=t(20);n.default=function(){var e=Object(r.useContext)(i.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},144:function(e,n,t){"use strict";t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return o}));var r=t(143),i=t(145);function a(){var e=Object(r.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,a=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,r){var a=void 0===r?{}:r,o=a.forcePrependBaseUrl,l=void 0!==o&&o,c=a.absolute,u=void 0!==c&&c;if(!t)return t;if(t.startsWith("#"))return t;if(Object(i.b)(t))return t;if(l)return n+t;var p=t.startsWith(n)?t:n+t.replace(/^\//,"");return u?e+p:p}(a,t,e,n)}}}function o(e,n){return void 0===n&&(n={}),(0,a().withBaseUrl)(e,n)}},145:function(e,n,t){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!r(e)}t.d(n,"b",(function(){return r})),t.d(n,"a",(function(){return i}))},146:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return i})),t.d(n,"useAllPluginInstancesData",(function(){return a})),t.d(n,"usePluginData",(function(){return o}));var r=t(143);function i(){var e=Object(r.default)().globalData;if(!e)throw new Error("Docusaurus global data not found");return e}function a(e){var n=i()[e];if(!n)throw new Error("Docusaurus plugin global data not found for pluginName="+e);return n}function o(e,n){void 0===n&&(n="default");var t=a(e)[n];if(!t)throw new Error("Docusaurus plugin global data not found for pluginName="+e+" and pluginId="+n);return t}},148:function(e,n,t){(function(n){const r=["internal","external"];let i;try{i=t(146).usePluginData}catch(c){i=null}function a(e){return function(e){if("object"!=typeof e)throw new Error(`fbContent() args must be an object containing keys: ${r}. Instead got ${e}`);if(!Object.keys(e).find((e=>r.find((n=>n===e)))))throw new Error(`No valid args found in ${JSON.stringify(e)}. Accepted keys: ${r}`);const n=Object.keys(e).filter((e=>!r.find((n=>n===e))));if(n.length>0)throw new Error(`Unexpected keys ${n} found in fbContent() args. Accepted keys: ${r}`)}(e),l()?"internal"in e?o(e.internal):[]:"external"in e?o(e.external):[]}function o(e){return"function"==typeof e?e():e}function l(){return n.env.FB_INTERNAL||i&&i("internaldocs-fb").FB_INTERNAL}e.exports={fbContent:a,fbInternalOnly:function(e){return a({internal:e})},isInternal:l,FbInternalOnly:function(e){return l()?e.children:null},OssOnly:function(e){return l()?null:e.children}}}).call(this,t(149))},149:function(e,n){var t,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function l(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var c,u=[],p=!1,s=-1;function d(){p&&c&&(p=!1,c.length?u=c.concat(u):s=-1,u.length&&b())}function b(){if(!p){var e=l(d);p=!0;for(var n=u.length;n;){for(c=u,u=[];++s<n;)c&&c[s].run();s=-1,n=u.length}c=null,p=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function f(e,n){this.fun=e,this.array=n}function m(){}i.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];u.push(new f(e,n)),1!==u.length||p||l(b)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return d}));var r=t(3),i=t(7),a=(t(0),t(142)),o=t(144),l=t(148),c={id:"android",title:"Building an Android Plugin"},u={unversionedId:"tutorial/android",id:"tutorial/android",isDocsHomePage:!1,title:"Building an Android Plugin",description:"For the purpose of the tutorial, we will assume you already have an existing",source:"@site/../docs/tutorial/android.mdx",slug:"/tutorial/android",permalink:"/docs/tutorial/android",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/tutorial/android.mdx",version:"current",sidebar:"extending",previous:{title:"Building an iOS Plugin",permalink:"/docs/tutorial/ios"},next:{title:"Building a React Native Plugin",permalink:"/docs/tutorial/react-native"}},p=[{value:"Creating a Plugin",id:"creating-a-plugin",children:[]},{value:"Registering your Plugin",id:"registering-your-plugin",children:[]},{value:"What next",id:"what-next",children:[]}],s={rightToc:p};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("img",{alt:"Android Tutorial App",src:Object(o.a)("img/android-tutorial-app.png")}),Object(a.b)("p",null,"For the purpose of the tutorial, we will assume you already have an existing\nAndroid application in which you have a feed or list of items. As the Flipper\nteam, we obviously concern ourselves mostly with sea mammals, so this is what\nour app displays. The actual display logic is not what's interesting here,\nbut how we can make this data available in our Flipper desktop app."),Object(a.b)("p",null,"Part of what makes Flipper so useful is allowing users to inspect the\ninternals of their app. In this case, we'd like to see the specific\nsea mammal data the app is handling, so let's write a plugin to make that\neasy."),Object(a.b)("p",null,"You can find the source code of the project ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/facebook/flipper/tree/7dae5771d96ea76b75796d3b3a2c78746e581e3f/android/tutorial"}),"on GitHub"),"."),Object(a.b)("h2",{id:"creating-a-plugin"},"Creating a Plugin"),Object(a.b)(l.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(a.b)("div",{class:"warning"},"[FB-Only] Depending the options selected during scaffolding (see intro), some of the following code might already have been generated by `scarf`.")),Object(a.b)("p",null,"On Android, a Flipper plugin is a class that implements the\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/facebook/flipper/blob/master/android/src/main/java/com/facebook/flipper/core/FlipperPlugin.java"}),Object(a.b)("inlineCode",{parentName:"a"},"FlipperPlugin")),"\ninterface."),Object(a.b)("p",null,"The interface is rather small and only comprises four methods:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"getId() -> String"),": Specify a unique string so the JavaScript side knows where to talk to. This must match the name attribute in the ",Object(a.b)("inlineCode",{parentName:"li"},"package.json")," we will look into later in this tutorial."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onConnect(FlipperConnection)"),": This method is called when the desktop app connects to the mobile client and is ready to receive or send data."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onDisconnect()"),": We're sure you can figure this one out."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"runInBackground() -> Boolean"),": Unless this is true, only the currently selected plugin in the Flipper UI can communicate with the device.")),Object(a.b)("p",null,"Let's implement these methods for our sealife app:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'import com.facebook.flipper.core.FlipperConnection\nimport com.facebook.flipper.core.FlipperObject\nimport com.facebook.flipper.core.FlipperPlugin\nimport com.facebook.flipper.sample.tutorial.MarineMammals\n\nclass SeaMammalFlipperPlugin : FlipperPlugin {\n    private var connection: FlipperConnection? = null\n\n    override fun getId(): String = "sea-mammals"\n\n    override fun onConnect(connection: FlipperConnection?) {\n        this.connection = connection\n\n        MarineMammals.list.mapIndexed { index, (title, picture_url) ->\n            FlipperObject.Builder()\n                    .put("id", index)\n                    .put("title", title)\n                    .put("url", picture_url).build()\n        }.forEach(this::newRow)\n    }\n\n    override fun onDisconnect() {\n        connection = null\n    }\n\n    override fun runInBackground(): Boolean = false\n\n    private fun newRow(row: FlipperObject) {\n        connection?.send("newRow", row)\n    }\n}\n')),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"See ",Object(a.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/facebook/flipper/blob/5afb148ffa9e267e5b24e0dfae198d1cf46cc396/android/tutorial/src/main/java/com/facebook/flipper/sample/tutorial/plugin/SeaMammalFlipperPlugin.kt"}),"SeaMammalFlipperPlugin.kt"))),Object(a.b)("p",null,"The two interesting bits here are ",Object(a.b)("inlineCode",{parentName:"p"},"onConnect")," and ",Object(a.b)("inlineCode",{parentName:"p"},"newRow"),". ",Object(a.b)("inlineCode",{parentName:"p"},"newRow"),' sends a message\nto the desktop app and is identified with the same name "newRow".'),Object(a.b)("p",null,"For our sample app, we're dealing with a static data source. However, in real\nlife, you will likely dynamically receive new data as the user interacts with\nthe app. So while we just send all the data we have at once in ",Object(a.b)("inlineCode",{parentName:"p"},"onConnect"),",\nyou would normally set up a listener here to instead call ",Object(a.b)("inlineCode",{parentName:"p"},"newRow")," as new data\narrives."),Object(a.b)("p",null,"You may have noticed that we don't just send random ",Object(a.b)("inlineCode",{parentName:"p"},"Object"),"s over the wire but\nuse ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperObject"),"s instead. What are they? A ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperObject")," works similar\nto a JSON dictionary and has a limited set of supported types like strings,\nintegers and arrays. Before sending an object from your native app to the\ndesktop, you first need to break it down into ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperObject"),"-serializable parts."),Object(a.b)("h2",{id:"registering-your-plugin"},"Registering your Plugin"),Object(a.b)("p",null,"Now all you need to do is let Flipper know about your new plugin. You do this\nby calling ",Object(a.b)("inlineCode",{parentName:"p"},"addPlugin")," on your ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperClient"),", which is normally created\nat application startup."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"val flipperClient = AndroidFlipperClient.getInstance(this)\n// Add all sorts of other amazing plugins here ...\nflipperClient.addPlugin(SeaMammalFlipperPlugin())\nflipperClient.start()\n")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"See ",Object(a.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/facebook/flipper/blob/5afb148ffa9e267e5b24e0dfae198d1cf46cc396/android/tutorial/src/main/java/com/facebook/flipper/sample/tutorial/TutorialApplication.kt"}),Object(a.b)("inlineCode",{parentName:"a"},"TutorialApplication.kt")))),Object(a.b)("h2",{id:"what-next"},"What next"),Object(a.b)("p",null,'When starting your application now, Flipper will tell the desktop application\nabout the plugin it supports, including "sea-mammals" and will look for a\ncorresponding JavaScript plugin by that name. Let\'s build that next.'))}d.isMDXComponent=!0}}]);