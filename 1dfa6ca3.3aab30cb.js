(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{142:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),s=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),u=i,h=p["".concat(r,".").concat(u)]||p[u]||d[u]||l;return n?a.a.createElement(h,o(o({ref:t},b),{},{components:n})):a.a.createElement(h,o({ref:t},b))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var b=2;b<l;b++)r[b]=n[b];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},143:function(e,t,n){"use strict";n.r(t);var i=n(0),a=n(20);t.default=function(){var e=Object(i.useContext)(a.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},146:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a})),n.d(t,"useAllPluginInstancesData",(function(){return l})),n.d(t,"usePluginData",(function(){return r}));var i=n(143);function a(){var e=Object(i.default)().globalData;if(!e)throw new Error("Docusaurus global data not found");return e}function l(e){var t=a()[e];if(!t)throw new Error("Docusaurus plugin global data not found for pluginName="+e);return t}function r(e,t){void 0===t&&(t="default");var n=l(e)[t];if(!n)throw new Error("Docusaurus plugin global data not found for pluginName="+e+" and pluginId="+t);return n}},148:function(e,t,n){(function(t){const i=["internal","external"];let a;try{a=n(146).usePluginData}catch(c){a=null}function l(e){return function(e){if("object"!=typeof e)throw new Error(`fbContent() args must be an object containing keys: ${i}. Instead got ${e}`);if(!Object.keys(e).find((e=>i.find((t=>t===e)))))throw new Error(`No valid args found in ${JSON.stringify(e)}. Accepted keys: ${i}`);const t=Object.keys(e).filter((e=>!i.find((t=>t===e))));if(t.length>0)throw new Error(`Unexpected keys ${t} found in fbContent() args. Accepted keys: ${i}`)}(e),o()?"internal"in e?r(e.internal):[]:"external"in e?r(e.external):[]}function r(e){return"function"==typeof e?e():e}function o(){return t.env.FB_INTERNAL||a&&a("internaldocs-fb").FB_INTERNAL}e.exports={fbContent:l,fbInternalOnly:function(e){return l({internal:e})},isInternal:o,FbInternalOnly:function(e){return o()?e.children:null},OssOnly:function(e){return o()?null:e.children}}}).call(this,n(149))},149:function(e,t){var n,i,a=e.exports={};function l(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===l||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:l}catch(e){n=l}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var c,b=[],s=!1,p=-1;function d(){s&&c&&(s=!1,c.length?b=c.concat(b):p=-1,b.length&&u())}function u(){if(!s){var e=o(d);s=!0;for(var t=b.length;t;){for(c=b,b=[];++p<t;)c&&c[p].run();p=-1,t=b.length}c=null,s=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];b.push(new h(e,t)),1!==b.length||s||o(u)},h.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var i=n(3),a=n(7),l=(n(0),n(142)),r=n(148),o={id:"flipper-plugin",title:"Desktop Plugin API"},c={unversionedId:"extending/flipper-plugin",id:"extending/flipper-plugin",isDocsHomePage:!1,title:"Desktop Plugin API",description:"PluginClient",source:"@site/../docs/extending/flipper-plugin.mdx",slug:"/extending/flipper-plugin",permalink:"/docs/extending/flipper-plugin",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/flipper-plugin.mdx",version:"current",sidebar:"extending",previous:{title:"Plugin Distribution",permalink:"/docs/extending/plugin-distribution"},next:{title:"Styling Components",permalink:"/docs/extending/styling-components"}},b=[{value:"PluginClient",id:"pluginclient",children:[{value:"Properties",id:"properties",children:[]},{value:"Events listeners",id:"events-listeners",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"DevicePluginClient",id:"devicepluginclient",children:[{value:"Properties",id:"properties-1",children:[]},{value:"Events",id:"events",children:[]},{value:"Methods",id:"methods-1",children:[]},{value:"<code>isPluginAvailable</code>",id:"ispluginavailable-1",children:[]},{value:"<code>selectPlugin</code>",id:"selectplugin-1",children:[]}]},{value:"Device",id:"device-2",children:[{value:"Properties",id:"properties-2",children:[]},{value:"Events",id:"events-1",children:[]}]},{value:"State Management",id:"state-management",children:[{value:"createState",id:"createstate",children:[]}]},{value:"React Hooks",id:"react-hooks",children:[{value:"usePlugin",id:"useplugin",children:[]},{value:"useValue",id:"usevalue",children:[]},{value:"useLogger",id:"uselogger",children:[]},{value:"useTrackedCallback",id:"usetrackedcallback",children:[]}]},{value:"UI components",id:"ui-components",children:[{value:"Layout.*",id:"layout",children:[]},{value:"NUX",id:"nux",children:[]},{value:"Tracked",id:"tracked",children:[]},{value:"TrackingScope",id:"trackingscope",children:[]},{value:"withTrackingScope",id:"withtrackingscope",children:[]},{value:"theme object",id:"theme-object",children:[]}]},{value:"Utilities",id:"utilities",children:[{value:"batch",id:"batch",children:[]},{value:"produce",id:"produce",children:[]},{value:"renderReactRoot",id:"renderreactroot",children:[]}]},{value:"sleep",id:"sleep",children:[]},{value:"styled",id:"styled",children:[]},{value:"TestUtils",id:"testutils",children:[{value:"Starting a plugin",id:"starting-a-plugin",children:[]}]}],s={rightToc:b};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"pluginclient"},"PluginClient"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"PluginClient")," is the type of the ",Object(l.b)("inlineCode",{parentName:"p"},"client")," passed into a standard Sandy plugin.\nIt takes two generic arguments ",Object(l.b)("inlineCode",{parentName:"p"},"Event")," and ",Object(l.b)("inlineCode",{parentName:"p"},"Methods"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"Event")," generic is a mapping of an event name to the data structure of the payload, as explained ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"../tutorial/js-custom#the-plugin-declaration"}),"here"),"."),Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"Methods")," generic is used to describe the methods that are offered by the plugin implementation on the device. ",Object(l.b)("inlineCode",{parentName:"li"},"Methods")," is a mapping of a method name to a function that describes the signature of a method. The first argument of that function describes the parameters that can be passed to the client. The return type of the function should describe what is returned from the client. Wrapped with a ",Object(l.b)("inlineCode",{parentName:"li"},"Promise"),".")),Object(l.b)("p",null,"Quick example on how those generics should be used:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"type LogEntry = {\n  message: string\n}\n\n// Events that can be send by the client implementation:\ntype Events = {\n  addLogEntry: LogEntry,\n  flushLogs: {},\n}\n\n// Methods we can invoken on the client:\ntype Methods = {\n  retrieveLogsSince(params: { since: number }): Promise<{ message: string }>,\n}\n\nexport function plugin(client: PluginClient<Events, Methods>) {\n  // etc\n}\n")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"PluginClient")," received by the ",Object(l.b)("inlineCode",{parentName:"p"},"plugin")," exposes the following members:"),Object(l.b)("h3",{id:"properties"},"Properties"),Object(l.b)("h4",{id:"device"},Object(l.b)("inlineCode",{parentName:"h4"},"device")),Object(l.b)("p",null,"Returns the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#device"}),Object(l.b)("inlineCode",{parentName:"a"},"Device"))," this plugin is connected to."),Object(l.b)("h4",{id:"appname"},Object(l.b)("inlineCode",{parentName:"h4"},"appName")),Object(l.b)("p",null,"The name of the application, for example 'Facebook', 'Instagram' or 'Slack'."),Object(l.b)("h4",{id:"appid"},Object(l.b)("inlineCode",{parentName:"h4"},"appId")),Object(l.b)("p",null,"A string that uniquely identifies the current application, is based on a combination of the application name and device serial on which the application is running."),Object(l.b)("h4",{id:"isconnected"},Object(l.b)("inlineCode",{parentName:"h4"},"isConnected")),Object(l.b)("p",null,"Returns whether there is currently an active connection. This is true if:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"The device is still connected"),Object(l.b)("li",{parentName:"ol"},"The client is still connected"),Object(l.b)("li",{parentName:"ol"},"The plugin is currently selected by the user ",Object(l.b)("em",{parentName:"li"},"or")," the plugin is running in the background.")),Object(l.b)("h3",{id:"events-listeners"},"Events listeners"),Object(l.b)("h4",{id:"onmessage"},Object(l.b)("inlineCode",{parentName:"h4"},"onMessage")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onMessage(event: string, callback: (params) => void)")),Object(l.b)("p",null,"This subscribes the plugin to a specific event that is fired from the client plugin (using ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"../extending/create-plugin#push-data-to-the-desktop"}),Object(l.b)("inlineCode",{parentName:"a"},"connection.send")),").\nTypically used to update some of the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#createstate"}),"state"),".\nFor background plugins that are currently not active in the UI, messages won't arrive immediately, but are queued until the user opens the plugin."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"type Events = {\n  newRow: {\n    id: number;\n    title: string;\n    url: string;\n  };\n};\n\nexport function plugin(client: PluginClient<Events, {}>) {\n  const rows = createState<Record<string, Row>>({}, {persist: 'rows'});\n\n  client.onMessage('newRow', (row /* type will be inferred correctly */) => {\n    rows.update((draft) => {\n      draft[row.id] = row;\n    });\n  });\n\n  // etc\n}\n")),Object(l.b)("h4",{id:"onunhandledmessage"},Object(l.b)("inlineCode",{parentName:"h4"},"onUnhandledMessage")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onUnhandledMessage(callback: (event: string, params) => void)")),Object(l.b)("p",null,"This method subscribe to all messages arriving from the devices which is not handled by an ",Object(l.b)("inlineCode",{parentName:"p"},"onMessage")," handler.\nThis handler is untyped, and onMessage should be favored over using onUnhandledMessage if the event name is known upfront."),Object(l.b)("h4",{id:"onactivate"},Object(l.b)("inlineCode",{parentName:"h4"},"onActivate")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onActivate(callback: () => void)")),Object(l.b)("p",null,"Called when the plugin is selected by the user and mounted into the Flipper Desktop UI. See also the closely related ",Object(l.b)("inlineCode",{parentName:"p"},"onConnect")," event."),Object(l.b)("h4",{id:"ondeactivate"},Object(l.b)("inlineCode",{parentName:"h4"},"onDeactivate")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onDeactivate(callback: () => void)")),Object(l.b)("p",null,"Triggered when the plugin is unmounted from the Flipper Desktop UI, because the user navigates to some other plugin.\nIn the case the plugin is destroyed while being active, onDeactivate will still be called."),Object(l.b)("h4",{id:"onconnect"},Object(l.b)("inlineCode",{parentName:"h4"},"onConnect")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onConnect(callback: () => void)")),Object(l.b)("p",null,"Triggered once the connection with the plugin on the client is established, and for example ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#send"}),Object(l.b)("inlineCode",{parentName:"a"},"send"))," can be called safely.\nTypically, this happens when the plugin is activated (opened) in the Flipper Desktop.\nHowever, for ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"create-plugin#background-plugins"}),"background plugins"),", this happens immediately after the plugin has been instantiated."),Object(l.b)("h4",{id:"ondisconnect"},Object(l.b)("inlineCode",{parentName:"h4"},"onDisconnect")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onDisconnect(callback: () => void)")),Object(l.b)("p",null,"Triggered once the connection with the plugin on the client has been lost.\nTypically, this happens when the user leaves the plugin in the Flipper Desktop, when the plugin is disabled, or when the app or device has disconnected.\nHowever, for ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"create-plugin#background-plugins"}),"background plugins"),", this event won't fire when the user merely navigates somewhere else.\nIn that case, ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#ondeactivate"}),Object(l.b)("inlineCode",{parentName:"a"},"onDeactivate"))," can be used instead."),Object(l.b)("h4",{id:"ondestroy"},Object(l.b)("inlineCode",{parentName:"h4"},"onDestroy")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onDestroy(callback: () => void)")),Object(l.b)("p",null,"Called when the plugin is unloaded. This happens if the device or client has been disconnected, or when the user disables the plugin.\nNote that there is no corresponding ",Object(l.b)("inlineCode",{parentName:"p"},"onCreate")," event, since the function body of the plugin definition acts already as 'what needs to be done when the plugin is loaded/enabled'."),Object(l.b)("h4",{id:"ondeeplink"},Object(l.b)("inlineCode",{parentName:"h4"},"onDeepLink")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onDeepLink(callback: (payload: unknown) => void)")),Object(l.b)("p",null,"Trigger when the users navigates to this plugin using a deeplink, either from an external ",Object(l.b)("inlineCode",{parentName:"p"},"flipper://")," plugin URL, or because the user was linked here from another plugin."),Object(l.b)("h4",{id:"onexport"},Object(l.b)("inlineCode",{parentName:"h4"},"onExport")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onExport(callback: (idler, onStatusMessage) => Promise<state>)")),Object(l.b)("p",null,"Overrides the default serialization behavior of this plugin. Should return a promise with persistable state that is to be stored.\nThis process is async, so it is possible to first fetch some additional state from the device. "),Object(l.b)("p",null,"Serializable is defined as: non-cyclic data, consisting purely of primitive values, plain objects, arrays or Date, Set or Map objects."),Object(l.b)("h4",{id:"onimport"},Object(l.b)("inlineCode",{parentName:"h4"},"onImport")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.onImport(callback: (snapshot) => void)")),Object(l.b)("p",null,"Overrides the default de-serialization behavior of this plugin. Use it to update the state based on the snapshot data.\nThis hook will be called immediately after constructing the plugin instance."),Object(l.b)("p",null,"To synchonize the types of the data between ",Object(l.b)("inlineCode",{parentName:"p"},"onImport")," and ",Object(l.b)("inlineCode",{parentName:"p"},"onExport"),", it is possible to provide a type as generic to both hooks.\nThe next example stores ",Object(l.b)("inlineCode",{parentName:"p"},"counter")," under the ",Object(l.b)("inlineCode",{parentName:"p"},"count")," field, and stores it as string rather than as number."),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),'type SerializedState = {\n  count: string;\n}\n\nexport function plugin(client: PluginClient) {\n  const counter = createState(0);\n\n  client.onExport<SerializedState>(() => {\n    return {\n      count: "" + counter.get()\n    }\n  })\n\n  client.onImport<SerializedState>((data) => {\n    counter.set(parseInt(data.count, 10));\n  });\n}\n')),Object(l.b)("h3",{id:"methods"},"Methods"),Object(l.b)("h4",{id:"send"},Object(l.b)("inlineCode",{parentName:"h4"},"send")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.send(method: string, params: object): Promise<object>")),Object(l.b)("p",null,"If the plugin is connected, ",Object(l.b)("inlineCode",{parentName:"p"},"send")," can be used to invoke a ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"create-plugin#%5Bbackground-plugins#using-flipperconnection"}),"method")," on the client implementation of the plugin."),Object(l.b)("p",null,"Note that if ",Object(l.b)("inlineCode",{parentName:"p"},"client.isConnected")," returns ",Object(l.b)("inlineCode",{parentName:"p"},"false"),", calling ",Object(l.b)("inlineCode",{parentName:"p"},"client.send")," will throw an exception. This is the case if for example the connection with the device or application was lost.\nGenerally one should guard ",Object(l.b)("inlineCode",{parentName:"p"},"client.send")," calls with a check to ",Object(l.b)("inlineCode",{parentName:"p"},"client.isConnected"),"."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"type Methods = {\n  currentLogs(params: {since: number}): Promise<string[]>;\n};\n\nexport function plugin(client: PluginClient<{}, Methods>) {\n  const logs = createState<string[]>([])\n\n  client.onConnect(async () => {\n    try {\n      const currentLogs = await client.send('currentLogs', {\n        since: Date.now()\n      })\n      logs.set(currentLogs)\n    } catch (e) {\n      console.error(\"Failed to retrieve current logs: \", e)\n    }\n  })\n\n  //etc\n}\n")),Object(l.b)("h4",{id:"addmenuentry"},Object(l.b)("inlineCode",{parentName:"h4"},"addMenuEntry")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.addMenuEntry(...entry: MenuEntry[])")),Object(l.b)("p",null,"This method can be used to add menu entries to the Flipper main menu while this plugin is active.\nIt supports registering global keyboard shortcuts as well.\nExample:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"client.addMenuEntry({\n    label: 'Reset Selection',\n    topLevelMenu: 'Edit',\n    accelerator: 'CmdOrCtrl+R'\n    handler: () => {\n      // Event handling\n    }\n}\n")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"accelerator")," argument is optional, but describes the keyboard shortcut. See the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.electronjs.org/docs/api/accelerator"}),"Electron docs")," for their format. The ",Object(l.b)("inlineCode",{parentName:"p"},"topLevelMenu")," must be one of ",Object(l.b)("inlineCode",{parentName:"p"},'"Edit"'),", ",Object(l.b)("inlineCode",{parentName:"p"},'"View"'),", ",Object(l.b)("inlineCode",{parentName:"p"},'"Window"')," or ",Object(l.b)("inlineCode",{parentName:"p"},'"Help"'),"."),Object(l.b)("p",null,"It is possible to leave out the ",Object(l.b)("inlineCode",{parentName:"p"},"label"),", ",Object(l.b)("inlineCode",{parentName:"p"},"topLevelMenu")," and ",Object(l.b)("inlineCode",{parentName:"p"},"accelerator")," fields if a pre-defined ",Object(l.b)("inlineCode",{parentName:"p"},"action")," is set, which configures all three of them.\nThe currently pre-defined actions are ",Object(l.b)("inlineCode",{parentName:"p"},'"Clear"'),", ",Object(l.b)("inlineCode",{parentName:"p"},'"Go To Bottom"')," and ",Object(l.b)("inlineCode",{parentName:"p"},'"Create Paste"'),".\nExample of using a pre-defined action:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"client.addMenuEntry({\n  action: 'createPaste',\n  handler: async () => {\n    // Event handling\n  }\n})\n")),Object(l.b)("h4",{id:"ispluginavailable"},Object(l.b)("inlineCode",{parentName:"h4"},"isPluginAvailable")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"isPluginAvailable(pluginId: string): boolean")),Object(l.b)("p",null,"Returns ",Object(l.b)("inlineCode",{parentName:"p"},"true")," if a plugin with the given id is available by for consumption, that is: supported by the current application / device, and enabled by the user."),Object(l.b)("h4",{id:"selectplugin"},Object(l.b)("inlineCode",{parentName:"h4"},"selectPlugin")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"selectPlugin(pluginId: string, deeplinkPayload?: unknown): void")),Object(l.b)("p",null,"Opens a different plugin by id, optionally providing a deeplink to bring the target plugin to a certain state."),Object(l.b)("h4",{id:"supportsmethod"},Object(l.b)("inlineCode",{parentName:"h4"},"supportsMethod")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.supportsMethod(method: string): Promise<Boolean>")),Object(l.b)("p",null,"Resolves to true if the client supports the specified method. Useful when adding functionality to existing plugins, when connectivity to older clients is still required. Also useful when client plugins are implemented on multitple platforms and don't all have feature parity."),Object(l.b)("h4",{id:"createpaste"},Object(l.b)("inlineCode",{parentName:"h4"},"createPaste")),Object(l.b)("p",null,"Facebook only API."),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.createPaste(value: string): Promise<string|undefined>")),Object(l.b)("p",null,"Creates a Facebook Paste (similar to a GitHub Gist) for the given ",Object(l.b)("inlineCode",{parentName:"p"},"value"),".\nThe returned promise either contains a string with the URL of the paste, or ",Object(l.b)("inlineCode",{parentName:"p"},"undefined")," if the process failed.\nDetails of the failure will be communicated back directly to the user through Flipper notifications.\nFor example if the user is currently not signed in."),Object(l.b)("h4",{id:"gk"},Object(l.b)("inlineCode",{parentName:"h4"},"GK")),Object(l.b)("p",null,"Facebook only API."),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"client.GK(gatekeeper: string): boolean")),Object(l.b)("p",null,"Returns ",Object(l.b)("inlineCode",{parentName:"p"},"true")," if the current user is part of the given GK. ",Object(l.b)("inlineCode",{parentName:"p"},"false")," in all other cases."),Object(l.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(l.b)("p",null,"To use a gatekeeper in the Facebook build of Flipper:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.internalfb.com/intern/gatekeeper/"}),"Create the gatekeeper")),Object(l.b)("li",{parentName:"ol"},"Add the Gatekeepers name to the ",Object(l.b)("inlineCode",{parentName:"li"},"subscribedGatekeepers")," array in ",Object(l.b)("inlineCode",{parentName:"li"},"fbsource/xplat/sonar/desktop/src/fb/GK.tsx")),Object(l.b)("li",{parentName:"ol"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"client.GK('name_of_gk')")," to read the gatekeeper, or alternatively: ",Object(l.b)("inlineCode",{parentName:"li"},"import {GK} from 'flipper'; GK.get('name_of_gk')"))),Object(l.b)("p",null,"The gatekeepers are cached in ",Object(l.b)("inlineCode",{parentName:"p"},"localStorage"),". Therefore, you might get the cached result of the gatekeeper on the first access (which defaults to ",Object(l.b)("inlineCode",{parentName:"p"},"false"),"). On the next start of the app you will get the new result.")),Object(l.b)("h2",{id:"devicepluginclient"},"DevicePluginClient"),Object(l.b)("h3",{id:"properties-1"},"Properties"),Object(l.b)("h4",{id:"device-1"},Object(l.b)("inlineCode",{parentName:"h4"},"device")),Object(l.b)("p",null,"Returns the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#device"}),Object(l.b)("inlineCode",{parentName:"a"},"Device"))," this plugin is connected to."),Object(l.b)("h3",{id:"events"},"Events"),Object(l.b)("h4",{id:"ondestroy-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onDestroy")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"onactivate-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onActivate")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"ondeactivate-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onDeactivate")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"ondeeplink-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onDeepLink")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"onexport-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onExport")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"onimport-1"},Object(l.b)("inlineCode",{parentName:"h4"},"onImport")),Object(l.b)("p",null,"See the similarly named event under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h3",{id:"methods-1"},"Methods"),Object(l.b)("h4",{id:"addmenuentry-1"},Object(l.b)("inlineCode",{parentName:"h4"},"addMenuEntry")),Object(l.b)("p",null,"See the similarly named method under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h4",{id:"createpaste-1"},Object(l.b)("inlineCode",{parentName:"h4"},"createPaste")),Object(l.b)("p",null,"See the similarly named method under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h3",{id:"ispluginavailable-1"},Object(l.b)("inlineCode",{parentName:"h3"},"isPluginAvailable")),Object(l.b)("p",null,"See the similarly named method under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h3",{id:"selectplugin-1"},Object(l.b)("inlineCode",{parentName:"h3"},"selectPlugin")),Object(l.b)("p",null,"See the similarly named method under ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#pluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"PluginClient")),"."),Object(l.b)("h2",{id:"device-2"},"Device"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Device")," captures the metadata of the device the plugin is currently connected to.\nDevice objects are passed into the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"../tutorial/js-custom#creating-a-device-plugin"}),Object(l.b)("inlineCode",{parentName:"a"},"supportsDevice")," method")," of a device plugin, and available as ",Object(l.b)("inlineCode",{parentName:"p"},"device")," field on a ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#devicepluginclient"}),Object(l.b)("inlineCode",{parentName:"a"},"DevicePluginClient")),"."),Object(l.b)("h3",{id:"properties-2"},"Properties"),Object(l.b)("h4",{id:"os"},"os"),Object(l.b)("p",null,"A ",Object(l.b)("inlineCode",{parentName:"p"},"string")," that describes the Operating System of the device. Typical values:\n",Object(l.b)("inlineCode",{parentName:"p"},"'iOS'")," | ",Object(l.b)("inlineCode",{parentName:"p"},"'Android'")," | ",Object(l.b)("inlineCode",{parentName:"p"},"'Windows'")," | ",Object(l.b)("inlineCode",{parentName:"p"},"'MacOS'")," | ",Object(l.b)("inlineCode",{parentName:"p"},"'Metro'")),Object(l.b)("h4",{id:"devicetype"},"deviceType"),Object(l.b)("p",null,"A ",Object(l.b)("inlineCode",{parentName:"p"},"string")," that describes whether the device is a physical device or an emulator. Possible values: ",Object(l.b)("inlineCode",{parentName:"p"},"'emulator'")," and ",Object(l.b)("inlineCode",{parentName:"p"},"'physical'"),"."),Object(l.b)("h4",{id:"isarchived"},"isArchived"),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"boolean")," flag is ",Object(l.b)("inlineCode",{parentName:"p"},"true")," if the current device is coming from an import Flipper snapshot, and not an actually connected device."),Object(l.b)("h4",{id:"isconnected-1"},"isConnected"),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"boolean")," flag is ",Object(l.b)("inlineCode",{parentName:"p"},"true")," if the connection to the device is still alive."),Object(l.b)("h3",{id:"events-1"},"Events"),Object(l.b)("h4",{id:"onlogentry"},Object(l.b)("inlineCode",{parentName:"h4"},"onLogEntry")),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"device.onLogEntry(callback: (logEntry: DeviceLogEntry) => void)")),Object(l.b)("p",null,"Use this event to subscribe to the log stream that is emitted by the device.\nFor Android this is using ",Object(l.b)("inlineCode",{parentName:"p"},"adb")," behind the scenes, for iOS ",Object(l.b)("inlineCode",{parentName:"p"},"idb"),", for Metro it connects to the webserver for the Metro log output, etc."),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"DeviceLogEntry")," exposes the following fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"date: Date")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"type: string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"message: string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pid: number")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tid: number")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"app?: string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tag: string"))),Object(l.b)("p",null,"For ",Object(l.b)("inlineCode",{parentName:"p"},"type"),", the possible values are ",Object(l.b)("inlineCode",{parentName:"p"},"'unknown'"),", ",Object(l.b)("inlineCode",{parentName:"p"},"'verbose'"),", ",Object(l.b)("inlineCode",{parentName:"p"},"'debug'"),", ",Object(l.b)("inlineCode",{parentName:"p"},"'info'"),", ",Object(l.b)("inlineCode",{parentName:"p"},"'warn'"),", ",Object(l.b)("inlineCode",{parentName:"p"},"'error'")," and ",Object(l.b)("inlineCode",{parentName:"p"},"'fatal'"),"."),Object(l.b)("h2",{id:"state-management"},"State Management"),Object(l.b)("p",null,"State in Sandy plugins is stored in small containers that hold immutable values, and can be consumed in React components using the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#usevalue"}),Object(l.b)("inlineCode",{parentName:"a"},"useValue"))," hook."),Object(l.b)("h3",{id:"createstate"},"createState"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"createState<T>(initialValue: T, options?): StateAtom<T>")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"createState")," method can be used to create a small state container that lives inside a Sandy plugin.\nIts value should be treated as immutable and is initialized by default using the ",Object(l.b)("inlineCode",{parentName:"p"},"initialValue")," parameter."),Object(l.b)("h4",{id:"options"},"Options"),Object(l.b)("p",null,"Optionally, ",Object(l.b)("inlineCode",{parentName:"p"},"options")," can be provided when creating state. Supported options:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"persist: string"),". If the ",Object(l.b)("inlineCode",{parentName:"li"},"persist")," value is set, this state container will be serialized when n Flipper snapshot export is being made. When a snapshot is imported into Flipper, and plugins are initialized, this state container will load its initial value from the snapshot, rather than using the ",Object(l.b)("inlineCode",{parentName:"li"},"initialValue")," parameter. The ",Object(l.b)("inlineCode",{parentName:"li"},"persist")," key should be unique within the plugin and only be set if the state stored in this container is serializable and won't become unreasonably large. See also ",Object(l.b)("inlineCode",{parentName:"li"},"exportState")," and ",Object(l.b)("inlineCode",{parentName:"li"},"initialState")," in the ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#testutils"}),Object(l.b)("inlineCode",{parentName:"a"},"TestUtils"))," section.")),Object(l.b)("p",null,"Serializable is defined as: non-cyclic data, consisting purely of primitive values, plain objects, arrays or Date, Set or Map objects."),Object(l.b)("h4",{id:"the-state-atom-object"},"The state atom object"),Object(l.b)("p",null,"A state atom object is returned by ",Object(l.b)("inlineCode",{parentName:"p"},"createState"),", exposing the following methods:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get(): T"),": Returns the current value stored. If you want to use the atom object in a React component, consider using the ",Object(l.b)("inlineCode",{parentName:"li"},"useValue")," hook instead, to make sure the component is notified about future updates of this atom."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"set(newValue: T)"),": Stores a new value into the atom. If the new value is not reference-equal to the previous one, all observing components will be notified."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"update(updater: (draft: Draft<T>) => void)"),": Updates the current state using an ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"https://immerjs.github.io/immer/docs/introduction"}),"Immer")," recipe. In the ",Object(l.b)("inlineCode",{parentName:"li"},"updater"),", the ",Object(l.b)("inlineCode",{parentName:"li"},"draft")," object can be safely (deeply) mutated. Once the ",Object(l.b)("inlineCode",{parentName:"li"},"updater")," finishes, Immer will compute a new immutable object based on the changes, and store that. This is often simpler than using a combination of ",Object(l.b)("inlineCode",{parentName:"li"},"get")," and ",Object(l.b)("inlineCode",{parentName:"li"},"set")," if deep updates need to be made to the stored object.")),Object(l.b)("h4",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import {createState} from 'flipper-plugin'\n\nconst rows = createState<string[]>([], {persist: 'rows'});\nconst selectedID = createState<string | null>(null, {persist: 'selection'});\n\nrows.set([\"hello\"])\nconsole.log(rows.get().length) // 1\nrows.update(draft => {\n  draft.push(\"world\")\n})\nconsole.log(rows.get().length) // 2\n")),Object(l.b)("h2",{id:"react-hooks"},"React Hooks"),Object(l.b)("h3",{id:"useplugin"},"usePlugin"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"const instance = usePlugin(plugin)")),Object(l.b)("p",null,"Can be used by any component in the plugin, and gives the current ",Object(l.b)("inlineCode",{parentName:"p"},"instance")," that corresponds with the currently loaded plugin.\nThe ",Object(l.b)("inlineCode",{parentName:"p"},"plugin")," parameter isn't actually used, but used to verify that a component is used correctly inside a mounted component, and helps with type inference.\nThe returned ",Object(l.b)("inlineCode",{parentName:"p"},"instance")," method corresponds to the object that is returned from the ",Object(l.b)("inlineCode",{parentName:"p"},"plugin")," / ",Object(l.b)("inlineCode",{parentName:"p"},"devicePlugin")," definition.\nSee the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"../tutorial/js-custom#building-an-user-interface-for-the-plugin"}),"tutorial")," for how this hook is used in practice."),Object(l.b)("h3",{id:"usevalue"},"useValue"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"const currentValue = useValue(stateAtom)")),Object(l.b)("p",null,"Returns the current value of a state atom, and also subscribes the current component to future changes of the atom (in contrast to using ",Object(l.b)("inlineCode",{parentName:"p"},"stateAtom.get()")," directly).\nSee the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"../tutorial/js-custom#building-an-user-interface-for-the-plugin"}),"tutorial")," for how this hook is used in practice."),Object(l.b)("h3",{id:"uselogger"},"useLogger"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"const logger = useLogger()")),Object(l.b)("p",null,"Provides the default logger that can be used for console logging, error reporting and performance measurements.\nIn internal Facebook builds this is wired up to the internal statistic reporting.\nPrefer using ",Object(l.b)("inlineCode",{parentName:"p"},"logger")," over using ",Object(l.b)("inlineCode",{parentName:"p"},"console")," directly."),Object(l.b)("p",null,"The logger API is defined as:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"interface Logger {\n  track(type: TrackType, event: string, data?: any, plugin?: string): void;\n  trackTimeSince(\n    mark: string,\n    eventName?: string | null | undefined,\n    data?: any,\n  ): void;\n  info(data: any, category: string): void;\n  warn(data: any, category: string): void;\n  error(data: any, category: string): void;\n  debug(data: any, category: string): void;\n}\n")),Object(l.b)("h3",{id:"usetrackedcallback"},"useTrackedCallback"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},'const eventHandler = useTrackedCallback("Interaction description", handlerFunction, deps)')),Object(l.b)("p",null,"Utility that wraps React's ",Object(l.b)("inlineCode",{parentName:"p"},"useCallback")," with tracking capabilities.\nThe API is similar, except that the first argument describes the interaction handled by the given event handler.\nSee ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#tracked"}),"Tracked")," for more info. "),Object(l.b)("h2",{id:"ui-components"},"UI components"),Object(l.b)("h3",{id:"layout"},"Layout.*"),Object(l.b)("p",null,"Layout elements can be used to organize the screen layout.\nSee ",Object(l.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide")," inside the Flipper application for more details."),Object(l.b)("h3",{id:"nux"},"NUX"),Object(l.b)("p",null,"An element that can be used to provide a New User eXperience: Hints that give a one time introduction to new features to the current user.\nSee ",Object(l.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide")," inside the Flipper application for more details."),Object(l.b)(r.FbInternalOnly,{mdxType:"FbInternalOnly"},Object(l.b)("h3",{id:"tracked"},"Tracked"),Object(l.b)("p",null,"An element that can be used to track user interactions.\nAn example scuba query can be found ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"https://fburl.com/scuba/infinity_analytics_events/xryoq5j7"}),"here"),"."),Object(l.b)("p",null,"See ",Object(l.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide")," inside the Flipper application for more details."),Object(l.b)("h3",{id:"trackingscope"},"TrackingScope"),Object(l.b)("p",null,"Defines the location of underlying Tracked elements more precisely.\nSee ",Object(l.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide")," inside the Flipper application for more details."),Object(l.b)("h3",{id:"withtrackingscope"},"withTrackingScope"),Object(l.b)("p",null,"Higher order component that wraps a component automatically in a ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"#TrackingScope"}),Object(l.b)("inlineCode",{parentName:"a"},"TrackingScope"))," using the component name as ",Object(l.b)("inlineCode",{parentName:"p"},"scope"),".")),Object(l.b)("h3",{id:"theme-object"},"theme object"),Object(l.b)("p",null,"Provides a standard set of colors and spacings, used by the Flipper style guide.\nThe colors exposed here support dark mode.\nSee ",Object(l.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide")," inside the Flipper application for more details."),Object(l.b)("h2",{id:"utilities"},"Utilities"),Object(l.b)("h3",{id:"batch"},"batch"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"batch(() => { /* state updates */ })")),Object(l.b)("p",null,"Low-level utility to batch state updates to reduce the amount of potential re-renders by React.\nWraps React's ",Object(l.b)("inlineCode",{parentName:"p"},"unstable_batchedUpdates"),".\nEvent handlers provided by React or ",Object(l.b)("inlineCode",{parentName:"p"},"flipper-plugin")," already apply ",Object(l.b)("inlineCode",{parentName:"p"},"batch")," automatically, so using this utility is only recommended when updating plugin state in an asynchronous process. "),Object(l.b)("h3",{id:"produce"},"produce"),Object(l.b)("p",null,"A convenience re-export of ",Object(l.b)("inlineCode",{parentName:"p"},"produce")," from ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"https://immerjs.github.io/immer/docs/produce"}),"Immer"),".\nThe ",Object(l.b)("inlineCode",{parentName:"p"},"update")," method of the state atoms returned by ",Object(l.b)("inlineCode",{parentName:"p"},"createState")," automatically applies ",Object(l.b)("inlineCode",{parentName:"p"},"produce")," to its updater function. "),Object(l.b)("h3",{id:"renderreactroot"},"renderReactRoot"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"renderReactRoot(handler: (unmount: () => void) => React.ReactElement)")),Object(l.b)("p",null,"Renders an element outside the current DOM tree.\nThis is a low-level utility that can be used to render for example Modal dialogs.\nThe provided ",Object(l.b)("inlineCode",{parentName:"p"},"handler")," function should return the root element to be rendered.\nOnce the element can be removed from the DOM, the ",Object(l.b)("inlineCode",{parentName:"p"},"unmount")," callback should be called.\nExample:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"renderReactRoot((unmount) => (\n  <RequiredParametersDialog\n    onHide={unmount}\n    uri={filteredQuery}\n    requiredParameters={params}\n    onSubmit={navigateTo}\n  />\n));\n")),Object(l.b)("h2",{id:"sleep"},"sleep"),Object(l.b)("p",null,"Usage: ",Object(l.b)("inlineCode",{parentName:"p"},"await sleep(1000)")),Object(l.b)("p",null,"Creates a promise that automatically resolves after the specified amount of milliseconds."),Object(l.b)("h2",{id:"styled"},"styled"),Object(l.b)("p",null,"A convenience re-export of ",Object(l.b)("inlineCode",{parentName:"p"},"styled")," from ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"https://emotion.sh/docs/styled"}),"emotion"),".  "),Object(l.b)("h2",{id:"testutils"},"TestUtils"),Object(l.b)("p",null,"The object ",Object(l.b)("inlineCode",{parentName:"p"},"TestUtils")," as exposed from ",Object(l.b)("inlineCode",{parentName:"p"},"flipper-plugin")," exposes utilities to write unit tests for Sandy plugins.\nDifferent utilities are exposed depending on whether you want to test a client or device plugin, and whether or not the component should be rendered or only the logic itself is going to be tested.\nIt is recommended to follow the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"../tutorial/js-custom"}),"tutorial")," first, as it explains how unit tests should be setup."),Object(l.b)("h3",{id:"starting-a-plugin"},"Starting a plugin"),Object(l.b)("p",null,"Usage:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"const runner = TestUtils.startPlugin(pluginModule, options?)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"const runner = TestUtils.renderPlugin(pluginModule, options?)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"const runner = TestUtils.startDevicePlugin(devicePluginModule, options?)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"const runner = TestUtils.renderDevicePlugin(devicePluginModule, options?)"))),Object(l.b)("p",null,"Starts a client plugin in a fully mocked environment, but without rendering support.\nThe pluginModule is an object that has a ",Object(l.b)("inlineCode",{parentName:"p"},"plugin")," (or ",Object(l.b)("inlineCode",{parentName:"p"},"devicePlugin")," and ",Object(l.b)("inlineCode",{parentName:"p"},"supportsDevice"),") and ",Object(l.b)("inlineCode",{parentName:"p"},"Component")," property.\nTypically, it is invoked with ",Object(l.b)("inlineCode",{parentName:"p"},"startPlugin(PluginUnderTest)"),", where ",Object(l.b)("inlineCode",{parentName:"p"},"PluginUnderTest")," is loaded like ",Object(l.b)("inlineCode",{parentName:"p"},'import * as PluginUnderTest from "../index.tsx"')," (the path to the actual definition).\nHowever, it doesn't have to be loaded with an entire module, and a local object with the same signature can be constructed as well."),Object(l.b)("h4",{id:"startplugin-options"},"startPlugin options"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"options")," argument is optional, but can specify the following fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"initialState"),": Can be used to start the plugin in a certain state, rather than in the default state. ",Object(l.b)("inlineCode",{parentName:"li"},"initialState")," should be an object that specifies for all the state atoms that have the ",Object(l.b)("inlineCode",{parentName:"li"},"persist")," option set, their initial value. For example: ",Object(l.b)("inlineCode",{parentName:"li"},'{ initialState: { rows: ["hello", "world"]}}'),", where ",Object(l.b)("inlineCode",{parentName:"li"},"rows")," matches the ",Object(l.b)("inlineCode",{parentName:"li"},"persist")," key of an atom."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isArchived: boolean"),": Setting this flag, will set the ",Object(l.b)("inlineCode",{parentName:"li"},"isArchived")," on the mocked device as well. Set it if you want to test the behavior of your plugin for imported devices (see also ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#isarchived"}),Object(l.b)("inlineCode",{parentName:"a"},"Device.isArchived")),"). Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isBackgroundPlugin"),": This makes sure the test runner emits life-cycle events in a way that is typical for background plugins. Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),". The notable difference in behavior is that calling ",Object(l.b)("inlineCode",{parentName:"li"},".active()")," on the test runner won't trigger the ",Object(l.b)("inlineCode",{parentName:"li"},"connect")," event to be fired, nor the ",Object(l.b)("inlineCode",{parentName:"li"},".deactivate()")," the ",Object(l.b)("inlineCode",{parentName:"li"},"disconnect")," event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"startUnactivated"),": This does not activate the plugin; ",Object(l.b)("inlineCode",{parentName:"li"},"connect")," needs to be explicitly called. This can be used in case setting mock implementation for ",Object(l.b)("inlineCode",{parentName:"li"},"onSend")," is required to make sure Client plugin works as expected. Defaults to ",Object(l.b)("inlineCode",{parentName:"li"},"false"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"GKs"),": A string array of gatekeeper names for which ",Object(l.b)("inlineCode",{parentName:"li"},"client.GK")," will ",Object(l.b)("inlineCode",{parentName:"li"},"true")," inside the test. By default GKs are assumed to be disabled inside unit tests.")),Object(l.b)("h4",{id:"the-test-runner-object"},"The test runner object"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"startPlugin")," returns an object that can be used to inspect and interact with your plugin instance.\nAgain, see the tutorial how to interact with this object in general.\nThe test runner is a bag full of utilities, but typically it is fine to just destructure the utilities relevant for the test.\nExposed members:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"instance"),": The object (public API) returned from your plugin definition. You will typically use this in most tests, either to trigger updates or to inspect the current state of the plugin."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exportState()"),": Grabs the current state of all ",Object(l.b)("inlineCode",{parentName:"li"},"persist")," enabled state atoms. The object format returned here is the same as in the ",Object(l.b)("inlineCode",{parentName:"li"},"initialState")," option."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"activate()"),": Emulate the ",Object(l.b)("inlineCode",{parentName:"li"},"onActivate")," event. By default, ",Object(l.b)("inlineCode",{parentName:"li"},"startPlugin")," already starts the plugin in activated state, and calling ",Object(l.b)("inlineCode",{parentName:"li"},"activate")," to test the ",Object(l.b)("inlineCode",{parentName:"li"},"onActivate")," event should be preceded by a ",Object(l.b)("inlineCode",{parentName:"li"},"deactivate()")," call first."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"deactivate()"),": Emulates a user navigating away from the plugin."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destroy()"),": Emulates the plugin being cleaned up, for example because the plugin is disabled by the user, or because the device / client has disconnected. After calling ",Object(l.b)("inlineCode",{parentName:"li"},"destroy")," the current ",Object(l.b)("inlineCode",{parentName:"li"},"runner")," is unusable."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"triggerDeepLink(payload)"),": Emulates a deepLink being triggered, and fires the ",Object(l.b)("inlineCode",{parentName:"li"},"onDeepLink")," event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"triggerMenuEntry(label)"),": Emulates the user clicking a menu entry in the Flipper main menu."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flipperLib"),": An object that exposed ",Object(l.b)("inlineCode",{parentName:"li"},"jest.fn()")," mocks for all built-in Flipper APIs that can be called by your plugin. So assertions can be made that the plugin did actually invoke those methods. For example: ",Object(l.b)("inlineCode",{parentName:"li"},'expect(runner.flipperLib.createPaste).toBeCalledWith("test message")'),". Currently supported mocks: ",Object(l.b)("inlineCode",{parentName:"li"},"createPaste"),", ",Object(l.b)("inlineCode",{parentName:"li"},"enableMenuEntries"),".")),Object(l.b)("p",null,"The following members are available when using the ",Object(l.b)("inlineCode",{parentName:"p"},"render...")," variant rather than the ",Object(l.b)("inlineCode",{parentName:"p"},"start...")," variant:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"renderer"),": This object can be used to query the DOM and further interact with it. It is provided by react-testing-library, and further documented ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"https://testing-library.com/docs/react-testing-library/api#render-result"}),"here"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"act"),": Use this function to wrap interactions with the plugin under test into a transaction, after which the DOM updates will be flushed by React. See also the ",Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"https://reactjs.org/docs/test-utils.html#act"}),Object(l.b)("inlineCode",{parentName:"a"},"act"))," documentation.")),Object(l.b)("p",null,"The following members are only available for Client plugins:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sendEvent(event, params)"),": Emulates an event being sent by the client plugin. Will trigger the corresponding ",Object(l.b)("inlineCode",{parentName:"li"},"onMessage")," handler in the plugin."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sendEvents({ method: string, params: object}[])"),": Like ",Object(l.b)("inlineCode",{parentName:"li"},"sendEvent"),", but sends multiple events at once."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"onSend"),": A ",Object(l.b)("inlineCode",{parentName:"li"},"jest.fn()")," that can be used to assert that ",Object(l.b)("inlineCode",{parentName:"li"},"client.send()")," was called by the plugin under test. For example ",Object(l.b)("inlineCode",{parentName:"li"},"expect(runner.onSend).toBeCalledWith('currentLogs"),", { since: 0})`."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"connect()"),": Triggers the ",Object(l.b)("inlineCode",{parentName:"li"},"onConnect()")," event. (For non-background plugins ",Object(l.b)("inlineCode",{parentName:"li"},"activate()")," could as well be used for this)."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"disconnect()"),": Triggers the ",Object(l.b)("inlineCode",{parentName:"li"},"onDisconnect()")," event. (For non-background plugins ",Object(l.b)("inlineCode",{parentName:"li"},"deactivate()")," could as well be used for this).")),Object(l.b)("p",null,"The following members are only available for Device plugins:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sendLogEntry(logEntry)"),": Emulates a log message arriving from the device. Triggers the ",Object(l.b)("inlineCode",{parentName:"li"},"client.device.onLogEntry")," listener.")))}p.isMDXComponent=!0}}]);