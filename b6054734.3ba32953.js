(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var i=n(3),a=n(7),r=(n(0),n(142)),o=n(144),l=(n(147),{id:"js-custom",title:"Building A Custom Desktop Plugin",sidebar_label:"Custom Plugin"}),s={unversionedId:"tutorial/js-custom",id:"tutorial/js-custom",isDocsHomePage:!1,title:"Building A Custom Desktop Plugin",description:"Displaying your data in a table might work for many use-cases. However, depending on your plugin and data it might make sense to customize the way your data is visualized. Flipper uses React to render the plugins and provides a variety of ready-to-use UI components that can be used to build custom plugin UIs.",source:"@site/../docs/tutorial/js-custom.mdx",slug:"/tutorial/js-custom",permalink:"/docs/tutorial/js-custom",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/tutorial/js-custom.mdx",version:"current",sidebar_label:"Custom Plugin",sidebar:"extending",previous:{title:"Showing a table",permalink:"/docs/tutorial/js-table"},next:{title:"Publishing your Plugin",permalink:"/docs/tutorial/js-publishing"}},c=[{value:"Replacing the table",id:"replacing-the-table",children:[]},{value:"The <code>plugin</code> declaration",id:"the-plugin-declaration",children:[]},{value:"Writing <code>plugin</code> logic",id:"writing-plugin-logic",children:[{value:"Testing <code>plugin</code> logic",id:"testing-plugin-logic",children:[]}]},{value:"Building a User Interface for the plugin",id:"building-a-user-interface-for-the-plugin",children:[{value:"Unit testing the User Interface",id:"unit-testing-the-user-interface",children:[]}]}],p={rightToc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Displaying your data in a table might work for many use-cases. However, depending on your plugin and data it might make sense to customize the way your data is visualized. Flipper uses React to render the plugins and provides a variety of ready-to-use UI components that can be used to build custom plugin UIs."),Object(r.b)("h2",{id:"replacing-the-table"},"Replacing the table"),Object(r.b)("p",null,"For our sea mammals app, we might not only want to see them listed as image URLs in a table but render the actual images in nice little cards. When selecting one of the cards we still want to display all details in the sidebar."),Object(r.b)("img",{alt:"Custom cards UI for our sea mammals plugin",src:Object(o.a)("img/js-custom.png")}),Object(r.b)("p",null,"Currently, the default export in our ",Object(r.b)("inlineCode",{parentName:"p"},"index.tsx")," is from ",Object(r.b)("inlineCode",{parentName:"p"},"createTablePlugin"),".\nNow we are going to replace this with a custom React component by using the more flexible APIs exposed by ",Object(r.b)("inlineCode",{parentName:"p"},"flipper-plugin")," .\nSo first let's add ",Object(r.b)("inlineCode",{parentName:"p"},"flipper-plugin")," as dependency: ",Object(r.b)("inlineCode",{parentName:"p"},"yarn add --peer flipper-plugin antd && yarn add --dev flipper-plugin antd"),"."),Object(r.b)("p",null,"After that, we replace our ",Object(r.b)("inlineCode",{parentName:"p"},"createTablePlugin")," with a ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," definition, and a ",Object(r.b)("inlineCode",{parentName:"p"},"Component")," definition which is used for rendering.\nSeparating those two concepts helps with testing and maintaining state when the user switches plugins."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import React from 'react';\nimport {PluginClient, createState} from 'flipper-plugin';\n\n// (3)\ntype Row = {\n  id: number;\n  title: string;\n  url: string;\n};\n\n// (2)\ntype Events = {\n  newRow: Row;\n};\n\n// (1)\nexport function plugin(client: PluginClient<Events, {}>) {\n  // (5)\n  const rows = createState<Record<string, Row>>({}, {persist: 'rows'});\n  const selectedID = createState<string | null>(null, {persist: 'selection'});\n\n  // (6)\n  client.onMessage('newRow', (row) => {\n    rows.update((draft) => {\n      draft[row.id] = row;\n    });\n  });\n\n  // (7)\n  function setSelection(id: number) {\n    selectedID.set('' + id);\n  }\n\n  // (4)\n  return {\n    rows,\n    selectedID,\n    setSelection,\n  };\n}\n\nexport function Component() {\n  return <h1>Sea Mammals plugin</h1>;\n}\n")),Object(r.b)("h2",{id:"the-plugin-declaration"},"The ",Object(r.b)("inlineCode",{parentName:"h2"},"plugin")," declaration"),Object(r.b)("p",null,"The implementation of our plugin is driven by the named, exported function ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," as defined at ",Object(r.b)("inlineCode",{parentName:"p"},"(3)"),".\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," method is called upon instantiating the plugin.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," method receives one argument, the ",Object(r.b)("inlineCode",{parentName:"p"},"client"),", which provides all APIs needed to both interact with Flipper desktop,\nand the plugin loaded into the client application.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"PluginClient")," types all available APIs and takes two generic arguments. "),Object(r.b)("p",null,"The first, ",Object(r.b)("inlineCode",{parentName:"p"},"Events"),", describes all possible events that can be sent from the client plugin to the desktop plugin,\nand determines the events available for ",Object(r.b)("inlineCode",{parentName:"p"},"client.onMessage")," (see below).\nIn our example, only one event can occur, ",Object(r.b)("inlineCode",{parentName:"p"},"newRow"),", as defined at ",Object(r.b)("inlineCode",{parentName:"p"},"(2)"),".\nBut typically there are more.\nThe data provided by this ",Object(r.b)("inlineCode",{parentName:"p"},"newRow")," event is described with the ",Object(r.b)("inlineCode",{parentName:"p"},"Row")," type, as defined at ",Object(r.b)("inlineCode",{parentName:"p"},"(3)"),".\nThe event names and data structures should correspond with the data that is send using ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"../extending/create-plugin#push-data-to-the-desktop"}),Object(r.b)("inlineCode",{parentName:"a"},"connection.send"))," from the client."),Object(r.b)("p",null,"From our ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," function, as shown at ",Object(r.b)("inlineCode",{parentName:"p"},"(4)"),", we have to return an object that captures the entire API we want to expose from our plugin to our UI components and unit tests.\nIn this case, we return the state atoms ",Object(r.b)("inlineCode",{parentName:"p"},"rows")," and ",Object(r.b)("inlineCode",{parentName:"p"},"selectedID"),", and expose the ",Object(r.b)("inlineCode",{parentName:"p"},"setSelection")," method."),Object(r.b)("h2",{id:"writing-plugin-logic"},"Writing ",Object(r.b)("inlineCode",{parentName:"h2"},"plugin")," logic"),Object(r.b)("p",null,"Since the ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," function will execute only once during the entire life-cycle of the plugin, we can use local variables in the function body to preserve state.\nIn our example, we create two pieces of state, the set of rows available, ",Object(r.b)("inlineCode",{parentName:"p"},"rows"),", and the current selection: ",Object(r.b)("inlineCode",{parentName:"p"},"selectionID"),". See ",Object(r.b)("inlineCode",{parentName:"p"},"(5)"),"."),Object(r.b)("p",null,"It is possible to store state directly in ",Object(r.b)("inlineCode",{parentName:"p"},"let")," declarations, but ",Object(r.b)("inlineCode",{parentName:"p"},"createState")," creates a storage container that gives us a few advantages.\nMost importantly, state created using ",Object(r.b)("inlineCode",{parentName:"p"},"createState")," can be subscribed to by our UI components using the ",Object(r.b)("inlineCode",{parentName:"p"},"useValue")," hook.\nSecondly, state created with ",Object(r.b)("inlineCode",{parentName:"p"},"createState")," can be made part of Flipper imports / exports.\nWe can enable this feature by providing a unique ",Object(r.b)("inlineCode",{parentName:"p"},"persist")," key.\nThe current value of a the container can be read using ",Object(r.b)("inlineCode",{parentName:"p"},".get()"),", and ",Object(r.b)("inlineCode",{parentName:"p"},".set()")," or ",Object(r.b)("inlineCode",{parentName:"p"},".update()")," can be used to replace the current value."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"client")," can be used to receive and send information to the client plugin.\nWith ",Object(r.b)("inlineCode",{parentName:"p"},"client.send"),", we can invoke methods on the plugin.\nWith ",Object(r.b)("inlineCode",{parentName:"p"},"client.onMessage")," (",Object(r.b)("inlineCode",{parentName:"p"},"(6)"),") we can subscribe to the specific events as specified with the ",Object(r.b)("inlineCode",{parentName:"p"},"Events")," type (",Object(r.b)("inlineCode",{parentName:"p"},"(2)"),").\nIn the event handler, we can update some pieces of state, using the ",Object(r.b)("inlineCode",{parentName:"p"},".set")," method to replace state, or the ",Object(r.b)("inlineCode",{parentName:"p"},".update")," method to immutably update the state using ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://immerjs.github.io/immer"}),"immer"),".",Object(r.b)("br",{parentName:"p"}),"\n","In this case, we add the received row to the ",Object(r.b)("inlineCode",{parentName:"p"},"rows")," state under its own ",Object(r.b)("inlineCode",{parentName:"p"},"id"),"."),Object(r.b)("p",null,"Finally, ",Object(r.b)("inlineCode",{parentName:"p"},"(7)"),", we create (and expose at ",Object(r.b)("inlineCode",{parentName:"p"},"(4)"),") a utility to update the selection, which we will user later in our UI."),Object(r.b)("p",null,"Note that no state should be stored outside the ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," definition; multiple invocations of ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," can be 'alive' if multiple connected apps are using the plugin.\nStoring the state inside the closure makes sure no state is mixed up."),Object(r.b)("h3",{id:"testing-plugin-logic"},"Testing ",Object(r.b)("inlineCode",{parentName:"h3"},"plugin")," logic"),Object(r.b)("p",null,"Before we create the UI for our plugin, we are going to pretend that we always write unit tests first.\nUnit tests will be picked automatically by Jest if they are named like ",Object(r.b)("inlineCode",{parentName:"p"},"__tests__/*.spec.tsx"),", so we create a file called ",Object(r.b)("inlineCode",{parentName:"p"},"__tests__/seamammals.spec.tsx")," and start the test runner by\nrunning ",Object(r.b)("inlineCode",{parentName:"p"},"yarn test --watch")," in our plugin root.\nHere is our initial unit test:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),'// (1)\nimport {TestUtils} from \'flipper-plugin\';\n// (2)\nimport * as MammalsPlugin from \'..\';\n\ntest(\'It can store rows\', () => {\n  // (3)\n  const {instance, sendEvent} = TestUtils.startPlugin(MammalsPlugin);\n\n  expect(instance.rows.get()).toEqual({});\n  expect(instance.selectedID.get()).toBeNull();\n\n  // (4)\n  sendEvent(\'newRow\', {\n    id: 1,\n    title: \'Dolphin\',\n    url: \'http://dolphin.png\',\n  });\n  sendEvent(\'newRow\', {\n    id: 2,\n    title: \'Turtle\',\n    url: \'http://turtle.png\',\n  });\n\n  // (5)\n  expect(instance.rows.get()).toMatchInlineSnapshot(`\n    Object {\n      "1": Object {\n        "id": 1,\n        "title": "Dolphin",\n        "url": "http://dolphin.png",\n      },\n      "2": Object {\n        "id": 2,\n        "title": "Turtle",\n        "url": "http://turtle.png",\n      },\n    }\n  `);\n});\n')),Object(r.b)("p",null,"Testing utilities for plugins are shipped as part of ",Object(r.b)("inlineCode",{parentName:"p"},"flipper-plugin"),", so we import them (",Object(r.b)("inlineCode",{parentName:"p"},"(1)"),").\nSecondly, we directly import our above plugin implementation into our unit test.\nUsing ",Object(r.b)("inlineCode",{parentName:"p"},"as"),", we put the entire implementation into one object, which is the format in which our utilities expect them (",Object(r.b)("inlineCode",{parentName:"p"},"(2)"),")."),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"TestUtils.startPlugin")," (",Object(r.b)("inlineCode",{parentName:"p"},"(3)"),") we can instantiate our plugin in a fully mocked environment,\nin which our plugin can do everything except for actually rendering, which makes this operation really cheap.\nFrom the ",Object(r.b)("inlineCode",{parentName:"p"},"startPlugin"),", we get back an ",Object(r.b)("inlineCode",{parentName:"p"},"instance"),", which corresponds to the object we returned from our ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," implementation (",Object(r.b)("inlineCode",{parentName:"p"},"(4)")," in our previous listing).\nBeyond that, we get a bunch of utilities to interact with our plugin.\nThe full list is documented ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"../extending/flipper-plugin#the-test-runner-object"}),"here"),", but for this test we are only interested in ",Object(r.b)("inlineCode",{parentName:"p"},"sendEvent"),"."),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"sendEvent"),", we can mimic the client plugin sending events to our plugin ",Object(r.b)("inlineCode",{parentName:"p"},"(4)"),".\nSimilarly we can emulate all other possible events, such as the initial connection setup with (",Object(r.b)("inlineCode",{parentName:"p"},".connect()"),"), the user (de)selecting the plugin (",Object(r.b)("inlineCode",{parentName:"p"},".activate()")," / ",Object(r.b)("inlineCode",{parentName:"p"},"deactivate()"),"), or a deeplink being triggered (",Object(r.b)("inlineCode",{parentName:"p"},".triggerDeepLink"),") etc."),Object(r.b)("p",null,"After the events have been sent, the internal state of our plugin should have been updated, so we assert this is the case at ",Object(r.b)("inlineCode",{parentName:"p"},"(5)"),".\nThe assertions are provided by ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://jestjs.io/"}),"Jest"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"toMatchInlineSnapshot")," is particularly useful, as it will generate the initial snapshot during the first run of the unit tests, which saves a lot of effort."),Object(r.b)("h2",{id:"building-a-user-interface-for-the-plugin"},"Building a User Interface for the plugin"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: For now, the plugin implementation as shown here uses the old Flipper component library ",Object(r.b)("inlineCode",{parentName:"em"},"flipper"),", expect nicer components in the future as part of ",Object(r.b)("inlineCode",{parentName:"em"},"flipper-plugin"),".")),Object(r.b)("p",null,"So far, in ",Object(r.b)("inlineCode",{parentName:"p"},"index.tsx"),", our ",Object(r.b)("inlineCode",{parentName:"p"},"Component")," didn't do anything useful yet. Time to build some nice UI.\nFlipper leverages Ant design, so any ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://ant.design/components/overview/"}),"official Ant component")," can be used in Flipper plugins."),Object(r.b)("p",null,"The styling system used by Flipper can be found by starting Flipper, and opening ",Object(r.b)("inlineCode",{parentName:"p"},"View > Flipper Style Guide"),".\nThe different ",Object(r.b)("inlineCode",{parentName:"p"},"Layout")," elements are documented there as well."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import React, {memo} from 'react';\nimport {Typography, Card} from 'antd';\nimport {\n  Layout,\n  PluginClient,\n  usePlugin,\n  createState,\n  useValue,\n  theme,\n  styled,\n} from 'flipper-plugin';\nimport {ManagedDataInspector, DetailSidebar} from 'flipper';\n\n// (1)\nexport function Component() {\n  // (2)\n  const instance = usePlugin(plugin);\n  // (3)\n  const rows = useValue(instance.rows);\n  const selectedID = useValue(instance.selectedID);\n\n  // (4)\n  return (\n    <>\n      <Layout.ScrollContainer\n        vertical\n        style={{background: theme.backgroundWash}}>\n        <Layout.Horizontal gap pad style={{flexWrap: 'wrap'}}>\n          {Object.entries(rows).map(([id, row]) => (\n            <MammalCard\n              row={row}\n              onSelect={instance.setSelection}\n              selected={id === selectedID}\n              key={id}\n            />\n          ))}\n        </Layout.Horizontal>\n      </Layout.ScrollContainer>\n      <DetailSidebar>\n        {selectedID && renderSidebar(rows[selectedID])}\n      </DetailSidebar>\n    </>\n  );\n}\n\nfunction renderSidebar(row: Row) {\n  return (\n    <Layout.Container gap pad>\n      <Typography.Title level={4}>Extras</Typography.Title>\n      <ManagedDataInspector data={row} expandRoot={true} />\n    </Layout.Container>\n  );\n}\n")),Object(r.b)("p",null,"A plugin module can have many components, but it should always export one component named ",Object(r.b)("inlineCode",{parentName:"p"},"Component")," that is used as the root component for the plugin rendering.\nThe component mustn't take any props, and will be mounted by Flipper when the user selects the plugin (",Object(r.b)("inlineCode",{parentName:"p"},"(1)"),")."),Object(r.b)("p",null,"Inside the component we can grab the relevant instance of the plugin by using the ",Object(r.b)("inlineCode",{parentName:"p"},"usePlugin")," (",Object(r.b)("inlineCode",{parentName:"p"},"(2)"),") hook.\nThis returns the instance API we returned in the first listing at the end of the ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," function.\nOur original ",Object(r.b)("inlineCode",{parentName:"p"},"plugin")," definition is passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"usePlugin")," as argument.\nThis is done to get the typings of ",Object(r.b)("inlineCode",{parentName:"p"},"instance")," correct and should always be done."),Object(r.b)("p",null,"With the ",Object(r.b)("inlineCode",{parentName:"p"},"useValue")," hook (",Object(r.b)("inlineCode",{parentName:"p"},"(3)"),"), we can grab the current value from the states we created earlier using ",Object(r.b)("inlineCode",{parentName:"p"},"createState"),".\nThe benefit of ",Object(r.b)("inlineCode",{parentName:"p"},"useValue(instance.rows)")," over using ",Object(r.b)("inlineCode",{parentName:"p"},"rows.get()"),", is that the first will automatically subscribe our component to any future updates to the state, causing the component to re-render when new rows arrive."),Object(r.b)("p",null,"Since both ",Object(r.b)("inlineCode",{parentName:"p"},"usePlugin")," and ",Object(r.b)("inlineCode",{parentName:"p"},"useValue")," are hooks, they usual React rules for them apply; they need to be called unconditionally.\nSo it is recommended to put them at the top of your component body.\nBoth hooks can not only be used in the root ",Object(r.b)("inlineCode",{parentName:"p"},"Component"),", but also in any other component in your plugin component tree.\nSo it is not necessary to grab all the data at the root, or pass down the ",Object(r.b)("inlineCode",{parentName:"p"},"instance")," to all child components. "),Object(r.b)("p",null,"Finally (",Object(r.b)("inlineCode",{parentName:"p"},"(4)"),") we render the data we have. The details have been left out here, as from here it is just idiomatic React code.\nThe source of the other ",Object(r.b)("inlineCode",{parentName:"p"},"MammalCard")," component can be found ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/facebook/flipper/blob/master/desktop/plugins/seamammals/src/index.tsx#L113-L165"}),"here"),"."),Object(r.b)("h3",{id:"unit-testing-the-user-interface"},"Unit testing the User Interface"),Object(r.b)("p",null,"At this moment the plugin is ready to be used in Flipper, and opening it should lead to sane results.\nBut let's verify with some tests that the UI works correctly, and doesn't regress in the future by adding another unit test to the ",Object(r.b)("inlineCode",{parentName:"p"},"seamammals.spec.tsx")," file and assert that the rendering is correct and interactive:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"test('It can have selection and render details', async () => {\n  // (1)\n  const {\n    instance,\n    renderer,\n    act,\n    sendEvent,\n    exportState,\n  } = TestUtils.renderPlugin(MammalsPlugin);\n\n  // (2)\n  sendEvent('newRow', {\n    id: 1,\n    title: 'Dolphin',\n    url: 'http://dolphin.png',\n  });\n  sendEvent('newRow', {\n    id: 2,\n    title: 'Turtle',\n    url: 'http://turtle.png',\n  });\n\n  // (3) Dolphin card should now be visible\n  expect(await renderer.findByTestId('Dolphin')).not.toBeNull();\n  // (4) Let's assert the structure of the Turtle card as well\n  expect(await renderer.findByTestId('Turtle')).toMatchInlineSnapshot(`\n    <div\n      class=\"css-ok7d66-View-FlexBox-FlexColumn\"\n      data-testid=\"Turtle\"\n    >\n      <div\n        class=\"css-vgz97s\"\n        style=\"background-image: url(http://turtle.png);\"\n      />\n      <span\n        class=\"css-8j2gzl-Text\"\n      >\n        Turtle\n      </span>\n    </div>\n  `);\n\n  // (5) Nothing selected, so we should not have a sidebar\n  expect(renderer.queryAllByText('Extras').length).toBe(0);\n\n  act(() => {\n    instance.setSelection(2);\n  });\n\n  // Sidebar should be visible now\n  expect(await renderer.findByText('Extras')).not.toBeNull();\n\n  // (6) Verify export\n  expect(exportState()).toEqual({\n    rows: {\n      '1': {\n        id: 1,\n        title: 'Dolphin',\n        url: 'http://dolphin.png',\n      },\n      '2': {\n        id: 2,\n        title: 'Turtle',\n        url: 'http://turtle.png',\n      },\n    },\n    selection: '2',\n  });\n});\n")),Object(r.b)("p",null,"Like in our previous test, we use ",Object(r.b)("inlineCode",{parentName:"p"},"TestUtils")," to start our plugin.\nBut rather than using ",Object(r.b)("inlineCode",{parentName:"p"},"startPlugin"),", we now use ",Object(r.b)("inlineCode",{parentName:"p"},"renderPlugin"),".\nWhich does the same but also renders the component in memory, using ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://testing-library.com/docs/react-testing-library/intro"}),"react-testing-library"),".\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"renderer")," returned by ",Object(r.b)("inlineCode",{parentName:"p"},"startPlugin")," allows us to interact with the DOM."),Object(r.b)("p",null,"Like in the previous test, we start by sending some events to the plugin (",Object(r.b)("inlineCode",{parentName:"p"},"(2)"),").\nAfter that (",Object(r.b)("inlineCode",{parentName:"p"},"(3)"),"), our new data should be reflected in the dom.\nSince we used ",Object(r.b)("inlineCode",{parentName:"p"},"<Card data-testid={row.title}")," in our component implementation (not shown above) we can search in the DOM based on that test-id to find the right element.\nBut it is also possible to search for a specific classname, etc.\nThe available queries are documented ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://testing-library.com/docs/dom-testing-library/api-queries#queries"}),"here"),"."),Object(r.b)("p",null,"Rather than just checking that the rendering isn't ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", we can also take a snapshot of the DOM, and assert that it doesn't change accidentally in the future.\nJest's ",Object(r.b)("inlineCode",{parentName:"p"},"toMatchInlineSnapshot")," (",Object(r.b)("inlineCode",{parentName:"p"},"(4)"),") is quite useful for that.\nBut don't overuse it as large snapshots are pretty useless and just create a maintenance burden without catching much."),Object(r.b)("p",null,"In the next section, ",Object(r.b)("inlineCode",{parentName:"p"},"(5)"),", we simulate updating the selection from code, and assert that the sidebar has become visible. Note that the update is wrapped in ",Object(r.b)("inlineCode",{parentName:"p"},"act"),", which is recommended as it makes sure that updates are flushed to the DOM before we make queries and assertions on the DOM (the earlier ",Object(r.b)("inlineCode",{parentName:"p"},"sendEvent")," does apply ",Object(r.b)("inlineCode",{parentName:"p"},"act")," automatically and doesn't need wrapping)."),Object(r.b)("p",null,"Alternatively, we could have emulated actually clicking a DOM element, by using ",Object(r.b)("inlineCode",{parentName:"p"},"fireEvent.click(renderer.findByTestId('dolphin'))"),". See ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://testing-library.com/docs/dom-testing-library/api-events"}),"firing events")," in the docs of React testing library for details."),Object(r.b)("p",null,"Finally (",Object(r.b)("inlineCode",{parentName:"p"},"(6)"),") we grab the final state of our plugin state by using the ",Object(r.b)("inlineCode",{parentName:"p"},"exportState")," utility.\nIt returns all the persistable state of our plugin, based on the ",Object(r.b)("inlineCode",{parentName:"p"},"persist")," keys we passed to ",Object(r.b)("inlineCode",{parentName:"p"},"createState")," in our first listing.\nWe can now assert that the plugin ends up in the desired state."))}u.isMDXComponent=!0},142:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=i,h=u["".concat(o,".").concat(b)]||u[b]||d[b]||r;return n?a.a.createElement(h,l(l({ref:t},c),{},{components:n})):a.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},143:function(e,t,n){"use strict";n.r(t);var i=n(0),a=n(20);t.default=function(){var e=Object(i.useContext)(a.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},144:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));var i=n(143),a=n(145);function r(){var e=Object(i.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,i){var r=void 0===i?{}:i,o=r.forcePrependBaseUrl,l=void 0!==o&&o,s=r.absolute,c=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if(Object(a.b)(n))return n;if(l)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+p:p}(r,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},145:function(e,t,n){"use strict";function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!i(e)}n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}))},147:function(e,t,n){"use strict";var i=n(0),a=n.n(i),r=n(11),o=n(145),l=n(9),s=Object(i.createContext)({collectLink:function(){}}),c=n(144),p=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(i=Object.getOwnPropertySymbols(e);a<i.length;a++)t.indexOf(i[a])<0&&Object.prototype.propertyIsEnumerable.call(e,i[a])&&(n[i[a]]=e[i[a]])}return n};t.a=function(e){var t,n,u,d=e.isNavLink,b=e.to,h=e.href,m=e.activeClassName,g=e.isActive,f=e["data-noBrokenLinkCheck"],O=p(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck"]),j=Object(c.b)().withBaseUrl,w=Object(i.useContext)(s),y=b||h,v=Object(o.a)(y),C=null==y?void 0:y.replace("pathname://",""),N=void 0!==C?function(e){return e.startsWith("/")}(n=C)?j(n):n:void 0,x=Object(i.useRef)(!1),T=d?r.e:r.c,k=l.a.canUseIntersectionObserver;Object(i.useEffect)((function(){return!k&&v&&window.docusaurus.prefetch(N),function(){k&&u&&u.disconnect()}}),[N,k,v]);var I=null!==(t=null==N?void 0:N.startsWith("#"))&&void 0!==t&&t,S=!N||!v||I;return N&&v&&!I&&!f&&w.collectLink(N),S?a.a.createElement("a",Object.assign({href:N},y&&!v&&{target:"_blank",rel:"noopener noreferrer"},O)):a.a.createElement(T,Object.assign({},O,{onMouseEnter:function(){x.current||(window.docusaurus.preload(N),x.current=!0)},innerRef:function(e){var t,n;k&&e&&v&&(t=e,n=function(){window.docusaurus.prefetch(N)},(u=new window.IntersectionObserver((function(e){e.forEach((function(e){t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(u.unobserve(t),u.disconnect(),n())}))}))).observe(t))},to:N||""},d&&{isActive:g,activeClassName:m}))}}}]);